version: 2
jobs:
  test:
    docker:
      - image: circleci/node:9.10
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: yarn test --coverage
      - run: ./node_modules/.bin/coveralls < ./coverage/lcov.info
  flow:
    docker:
      - image: circleci/node:9.10
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: yarn install
      - run: yarn flow-typed install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
            - ./flow-typed/npm
      - run: yarn flow
  lint:
    docker:
      - image: circleci/node:9.10
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: yarn lint

  e2e:
    machine:
      docker_layer_caching: true
    environment:
      COMPOSE_FILE: .circleci/docker-compose.ci.yml
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      # create compose file from template
      - run: envsubst < .circleci/compose-template.yml > .circleci/docker-compose.ci.yml
      # setup e2e
      - run: docker-compose pull elija
      - run: docker-compose build jona
      - run: docker-compose up -d
      - run: docker-compose exec jona dockerize -wait http://elija:5000 -timeout 1m
      - run: docker-compose exec jona yarn cypress run
      # push jona_dev image
      - run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run: docker push bp2018hg1/jona_dev:$CIRCLE_BRANCH
      - store_artifacts:
          path: ~/project/cypress/screenshots
          destination: e2e-screenshots
      - store_artifacts:
          path: ~/project/cypress/videos
          destination: e2e-videos
  build_staging:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run: docker build --build-arg ENVIRONMENT=staging -t bp2018hg1/jona_staging:$CIRCLE_WORKFLOW_ID -t bp2018hg1/jona_staging:latest .
      - run: docker push bp2018hg1/jona_staging:$CIRCLE_WORKFLOW_ID
      - run: docker push bp2018hg1/jona_staging:latest
  build_production:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      - run: docker build -t bp2018hg1/jona:$CIRCLE_WORKFLOW_ID -t bp2018hg1/jona_production:$CIRCLE_WORKFLOW_ID -t bp2018hg1/jona_production:latest -t bp2018hg1/jona:latest .
      - run: docker push bp2018hg1/jona_production:latest
      - run: docker push bp2018hg1/jona_production:$CIRCLE_WORKFLOW_ID
      - run: docker push bp2018hg1/jona:$CIRCLE_WORKFLOW_ID
      - run: docker push bp2018hg1/jona:latest
  deploy_staging:
    machine: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - $STAGING_DEPLOY_FINGERPRINT
      - run: ssh root@$STAGING_DEPLOY_HOST "cd $STAGING_DEPLOY_HOME; ./deploy jona bp2018hg1/jona_staging:$CIRCLE_WORKFLOW_ID"
  deploy_production:
    machine: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - $PRODUCTION_DEPLOY_FINGERPRINT
      - run: ssh root@$PRODUCTION_DEPLOY_HOST "cd $PRODUCTION_DEPLOY_HOME; ./deploy jona bp2018hg1/jona:$CIRCLE_WORKFLOW_ID"

workflows:
  version: 2
  pipeline:
    jobs:
      - test
      # - flow
      - lint
      - e2e
      - build_staging:
          requires:
            - test
            - flow
            - lint
            - e2e
          filters:
            branches:
              only: master
      - build_production:
          requires:
            - test
            - flow
            - lint
            - e2e
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - build_staging
          filters:
            branches:
              only: master
      - hold_production_deploy:
          type: approval
          requires:
            - build_production
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - hold_production_deploy
          filters:
            branches:
              only: master
